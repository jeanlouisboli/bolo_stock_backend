// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum TypeUser {
  CLIENT
  PARTENAIRE
  ADMIN
}

model TypePartner {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  libelle String

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  partner Partner[]

  @@map("t_type_partner")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  phone     String
  email     String   @unique
  password  String
  type_user TypeUser
  partnerId String? @db.ObjectId
  partner Partner? @relation(fields: [partnerId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  Orders Orders[]

  @@map("t_user")
}

model Partner {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  adress    String
  country   String
  city      String
  email     String
  latitude  Float?
  longitude Float?
  approved  Boolean?
  totalSale Float?
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime? 

  typePartnerId String?      @db.ObjectId
  typePartner   TypePartner? @relation(fields: [typePartnerId], references: [id])

  product   Product[]
  promotion Promotion[]
  user User[]

  @@map("t_partner")
}

model Category {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  libelle String

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  product Product[]

  @@map("t_category")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  libelle     String
  description String
  prix        Int?
  imagePath   String?

  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  categoryId String?   @db.ObjectId
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  Promotion Promotion[]

  @@map("t_product")
}

model Promotion {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  prixPromo Int
  remise    Int
  stock     Int
  seuil     Int
  statut    Boolean @default(true)

  partnerId String  @db.ObjectId
  partner   Partner @relation(fields: [partnerId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])

  dateDebut  DateTime?
  dateExpire DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime?
  deletedAt  DateTime?

  Orders Orders[]

  @@map("t_promotion")
}

model Orders {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  promotionId String    @db.ObjectId
  promotion   Promotion @relation(fields: [promotionId], references: [id])

  quantite Int
  prix     Int
  amount   Float?

  createdAt DateTime  @default(now())
  updatedAt DateTime?
  deletedAt DateTime?

  @@map("t_orders")
}
