// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


enum Role {
  CLIENT
  ENTREPRISE
  ADMIN
}



model Partenaire{
  id Int @id @default(autoincrement())
  name String
  type_commerce String
  adresse String
  pays String
  ville String
  email String 
  latitude   Float?
  longitude  Float?
  username   String? @unique
  password String?
  approved Boolean?
  venteTotal Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime? 
  deletedAt DateTime?

  

  product Product[]
  Promotion Promotion[]

  @@map("t_partenaire")
}

model Product{
  id Int @id @default(autoincrement())
  libelle String
  categorie String?
  description String
  prix Int?
  imagePath String? 
  
  partenaireId Int 
  partenaire Partenaire @relation(fields: [partenaireId], references: [id])

  
  createdAt DateTime @default(now())
  updatedAt DateTime? 
  deletedAt DateTime?
 
  Promotion Promotion[]

  @@map("t_product")
}


model Promotion{
  id Int @id @default(autoincrement())
  
  prixPromo Int
  remise Int
  stock Int
  seuil Int
  statut Boolean @default(true)

  partenaireId Int 
  partenaire Partenaire @relation(fields: [partenaireId], references: [id])

  productId Int 
  product Product @relation(fields: [productId], references: [id])


  dateDebut DateTime?
  dateExpire DateTime? 
  createdAt DateTime @default(now())
  updatedAt DateTime? 
  deletedAt DateTime?
 
  Orders Orders[]
  

  @@map("t_promotion")
}


model Client{

  id Int @id @default(autoincrement())
   nomClient String
  numeroTelephone String
  email String @unique


  createdAt DateTime @default(now())
  updatedAt DateTime? 
  deletedAt DateTime?


  Orders Orders[]
  @@map("t_client")

}

model Orders{
  id Int @id @default(autoincrement())


  clientId Int
  client Client @relation(fields: [clientId], references: [id]) 

  promotionId Int
  promotion Promotion @relation(fields: [promotionId], references: [id])

  quantite Int
  prix Int 
  montant Float?

  createdAt DateTime @default(now())
  updatedAt DateTime? 
  deletedAt DateTime?

 

  @@map("t_orders") 
}





